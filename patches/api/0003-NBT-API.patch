From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nesaak <52047222+Nesaak@users.noreply.github.com>
Date: Sun, 31 May 2020 19:25:09 -0400
Subject: [PATCH] NBT API


diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index ccd81fca25233c2a9c2a8c3f4dda3053d7b2e723..1c8f9c879d3fdf75e5c38b9f08eaaed5b0901a59 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -5,6 +5,7 @@ import java.util.LinkedHashMap;
 import java.util.List; // Paper
 import java.util.Map;
 import java.util.Set; // Paper
+
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
@@ -791,4 +792,61 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
         return itemMeta.hasItemFlag(flag);
     }
     // Paper end
+
+    // Nesaak start
+
+    @Nullable
+    public ItemMeta getMetaMirror() {
+        return this.meta == null ? meta = Bukkit.getItemFactory().getItemMeta(this.type) : this.meta;
+    }
+
+    public boolean hasNBT(String key) {
+        return getMetaMirror().hasNBT(key);
+    }
+
+    public void removeNBT(String key) {
+        getMetaMirror().removeNBT(key);
+    }
+
+    public void setNBT(String key, String value) {
+        getMetaMirror().setNBT(key, value);
+    }
+
+    public void setNBT(String key, int value) {
+        getMetaMirror().setNBT(key, value);
+    }
+
+    public void setNBT(String key, long value) {
+        getMetaMirror().setNBT(key, value);
+    }
+
+    public void setNBT(String key, double value) {
+        getMetaMirror().setNBT(key, value);
+    }
+
+    public void setNBT(String key, byte value) {
+        getMetaMirror().setNBT(key, value);
+    }
+
+    public String getNBTString(String key) {
+        return getMetaMirror().getNBTString(key);
+    }
+
+    public int getNBTInt(String key) {
+        return getMetaMirror().getNBTInt(key);
+    }
+
+    public long getNBTLong(String key) {
+        return getMetaMirror().getNBTLong(key);
+    }
+
+    public double getNBTDouble(String key) {
+        return getMetaMirror().getNBTLong(key);
+    }
+
+    public byte getNBTByte(String key) {
+        return getMetaMirror().getNBTByte(key);
+    }
+
+    // Nesaak end
 }
diff --git a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
index 7e0b1d363829031075b6822d7b35ccde9fc05da9..b48908368d882fe3ba5558cfb894efc26acd8511 100644
--- a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
@@ -1,10 +1,12 @@
 package org.bukkit.inventory.meta;
 
 import com.google.common.collect.Multimap;
+
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+
 import org.bukkit.attribute.Attribute;
 import org.bukkit.attribute.AttributeModifier;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
@@ -39,8 +41,7 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      *
      * @return the display name that is set
      */
-    @NotNull
-    String getDisplayName();
+    @NotNull String getDisplayName();
 
     /**
      * Sets the display name.
@@ -64,8 +65,7 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      *
      * @return the localized name that is set
      */
-    @NotNull
-    String getLocalizedName();
+    @NotNull String getLocalizedName();
 
     /**
      * Sets the localized name.
@@ -89,8 +89,7 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      *
      * @return a list of lore that is set
      */
-    @Nullable
-    List<String> getLore();
+    @Nullable List<String> getLore();
 
     /**
      * Sets the lore for this item.
@@ -162,18 +161,17 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      *
      * @return An immutable copy of the enchantments
      */
-    @NotNull
-    Map<Enchantment, Integer> getEnchants();
+    @NotNull Map<Enchantment, Integer> getEnchants();
 
     /**
      * Adds the specified enchantment to this item meta.
      *
-     * @param ench Enchantment to add
-     * @param level Level for the enchantment
+     * @param ench                   Enchantment to add
+     * @param level                  Level for the enchantment
      * @param ignoreLevelRestriction this indicates the enchantment should be
-     *     applied, ignoring the level limit
+     *                               applied, ignoring the level limit
      * @return true if the item meta changed as a result of this call, false
-     *     otherwise
+     * otherwise
      */
     boolean addEnchant(@NotNull Enchantment ench, int level, boolean ignoreLevelRestriction);
 
@@ -182,7 +180,7 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      *
      * @param ench Enchantment to remove
      * @return true if the item meta changed as a result of this call, false
-     *     otherwise
+     * otherwise
      */
     boolean removeEnchant(@NotNull Enchantment ench);
 
@@ -214,8 +212,7 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      *
      * @return A set of all itemFlags set
      */
-    @NotNull
-    Set<ItemFlag> getItemFlags();
+    @NotNull Set<ItemFlag> getItemFlags();
 
     /**
      * Check if the specified flag is present on this item.
@@ -253,10 +250,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      * Returns null if none exist.
      *
      * @return an immutable {@link Multimap} of Attributes
-     *         and their AttributeModifiers, or null if none exist
+     * and their AttributeModifiers, or null if none exist
      */
-    @Nullable
-    Multimap<Attribute, AttributeModifier> getAttributeModifiers();
+    @Nullable Multimap<Attribute, AttributeModifier> getAttributeModifiers();
 
     /**
      * Return an immutable copy of all {@link Attribute}s and their
@@ -269,11 +265,10 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      *
      * @param slot the {@link EquipmentSlot} to check
      * @return the immutable {@link Multimap} with the
-     *         respective Attributes and modifiers, or an empty map
-     *         if no attributes are set.
+     * respective Attributes and modifiers, or an empty map
+     * if no attributes are set.
      */
-    @NotNull
-    Multimap<Attribute, AttributeModifier> getAttributeModifiers(@NotNull EquipmentSlot slot);
+    @NotNull Multimap<Attribute, AttributeModifier> getAttributeModifiers(@NotNull EquipmentSlot slot);
 
     /**
      * Return an immutable copy of all {@link AttributeModifier}s
@@ -281,11 +276,10 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      *
      * @param attribute the {@link Attribute}
      * @return an immutable collection of {@link AttributeModifier}s
-     *          or null if no AttributeModifiers exist for the Attribute.
+     * or null if no AttributeModifiers exist for the Attribute.
      * @throws NullPointerException if Attribute is null
      */
-    @Nullable
-    Collection<AttributeModifier> getAttributeModifiers(@NotNull Attribute attribute);
+    @Nullable Collection<AttributeModifier> getAttributeModifiers(@NotNull Attribute attribute);
 
     /**
      * Add an Attribute and it's Modifier.
@@ -296,11 +290,11 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      * cannot exist on the same Attribute.
      *
      * @param attribute the {@link Attribute} to modify
-     * @param modifier the {@link AttributeModifier} specifying the modification
+     * @param modifier  the {@link AttributeModifier} specifying the modification
      * @return true if the Attribute and AttributeModifier were
-     *         successfully added
-     * @throws NullPointerException if Attribute is null
-     * @throws NullPointerException if AttributeModifier is null
+     * successfully added
+     * @throws NullPointerException     if Attribute is null
+     * @throws NullPointerException     if AttributeModifier is null
      * @throws IllegalArgumentException if AttributeModifier already exists
      */
     boolean addAttributeModifier(@NotNull Attribute attribute, @NotNull AttributeModifier modifier);
@@ -323,9 +317,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      * This will return false if nothing was removed.
      *
      * @param attribute attribute to remove
-     * @return  true if all modifiers were removed from a given
-     *                  Attribute. Returns false if no attributes were
-     *                  removed.
+     * @return true if all modifiers were removed from a given
+     * Attribute. Returns false if no attributes were
+     * removed.
      * @throws NullPointerException if Attribute is null
      */
     boolean removeAttributeModifier(@NotNull Attribute attribute);
@@ -339,7 +333,7 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      * @param slot the {@link EquipmentSlot} to clear all Attributes and
      *             their modifiers for
      * @return true if all modifiers were removed that match the given
-     *         EquipmentSlot.
+     * EquipmentSlot.
      */
     boolean removeAttributeModifier(@NotNull EquipmentSlot slot);
 
@@ -348,12 +342,10 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      * AttributeModifiers are matched according to their {@link java.util.UUID}.
      *
      * @param attribute the {@link Attribute} to remove
-     * @param modifier the {@link AttributeModifier} to remove
+     * @param modifier  the {@link AttributeModifier} to remove
      * @return if any attribute modifiers were remove
-     *
      * @throws NullPointerException if the Attribute is null
      * @throws NullPointerException if the AttributeModifier is null
-     *
      * @see AttributeModifier#getUniqueId()
      */
     boolean removeAttributeModifier(@NotNull Attribute attribute, @NotNull AttributeModifier modifier);
@@ -361,11 +353,11 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
     /**
      * Returns a public custom tag container capable of storing tags on the
      * item.
-     *
+     * <p>
      * Those tags will be sent to the client with all of their content, so the
      * client is capable of reading them. This will result in the player seeing
      * a NBT Tag notification on the item.
-     *
+     * <p>
      * These tags can also be modified by the client once in creative mode
      *
      * @return the custom tag container
@@ -386,9 +378,7 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
     void setVersion(int version);
 
     @SuppressWarnings("javadoc")
-    @NotNull
-    ItemMeta clone();
-
+    @NotNull ItemMeta clone();
     // Paper start - Add an API for CanPlaceOn and CanDestroy NBT values
     /**
      * Gets set of materials what given item can destroy in {@link org.bukkit.GameMode#ADVENTURE}
@@ -431,8 +421,7 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      *
      * @return Set of {@link com.destroystokyo.paper.Namespaced}
      */
-    @NotNull
-    Set<com.destroystokyo.paper.Namespaced> getDestroyableKeys();
+    @NotNull Set<com.destroystokyo.paper.Namespaced> getDestroyableKeys();
 
     /**
      * Sets the collection of namespaced keys that the item can destroy in {@link org.bukkit.GameMode#ADVENTURE}
@@ -446,16 +435,14 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      *
      * @return Set of {@link com.destroystokyo.paper.Namespaced}
      */
-    @NotNull
-    Set<com.destroystokyo.paper.Namespaced> getPlaceableKeys();
+    @NotNull Set<com.destroystokyo.paper.Namespaced> getPlaceableKeys();
 
     /**
      * Sets the set of namespaced keys that the item can be placed on in {@link org.bukkit.GameMode#ADVENTURE}
      *
      * @param canPlaceOn Collection of {@link com.destroystokyo.paper.Namespaced}
      */
-    @NotNull
-    void setPlaceableKeys(@NotNull Collection<com.destroystokyo.paper.Namespaced> canPlaceOn);
+    @NotNull void setPlaceableKeys(@NotNull Collection<com.destroystokyo.paper.Namespaced> canPlaceOn);
 
     /**
      * Checks for the existence of any keys that the item can be placed on
@@ -471,4 +458,32 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      */
     boolean hasDestroyableKeys();
     // Paper end
+
+    //Nesaak start
+
+    boolean hasNBT(String key);
+
+    void removeNBT(String key);
+
+    void setNBT(String key, String value);
+
+    void setNBT(String key, int value);
+
+    void setNBT(String key, long value);
+
+    void setNBT(String key, double value);
+
+    void setNBT(String key, byte value);
+
+    String getNBTString(String key);
+
+    int getNBTInt(String key);
+
+    long getNBTLong(String key);
+
+    double getNBTDouble(String key);
+
+    byte getNBTByte(String key);
+
+    // Nesaak end
 }

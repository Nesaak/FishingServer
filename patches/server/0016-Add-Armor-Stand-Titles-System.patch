From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nesaak <52047222+Nesaak@users.noreply.github.com>
Date: Sat, 27 Jun 2020 09:39:27 -0400
Subject: [PATCH] Add Armor Stand Titles System


diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 5a1f34930dd46cc2e4d35ab3e9b3a1a7585a01ae..e88e66a2faca8da4edd9abad2d5c93cee2ca5028 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -26,6 +26,7 @@ import org.bukkit.Location;
 import org.bukkit.Server;
 import org.bukkit.block.BlockFace;
 import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.entity.Hanging;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Vehicle;
@@ -212,6 +213,27 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
             }, trackedPlayer);
         }
     }
+    private String title;
+    public double titleHeight;
+    public void setTitle(String title) {
+        if (title == null) {
+            if (this.title != null) tracker.trackerEntry.broadcast(new PacketPlayOutEntityDestroy(id + EntityTrackerEntry.TITLE_INT));
+        } else {
+            if (this.title == null) {
+                Vec3D vec3d = getMot();
+                double d1 = MathHelper.a(vec3d.x, -3.9D, 3.9D);
+                double d2 = MathHelper.a(vec3d.y, -3.9D, 3.9D);
+                double d3 = MathHelper.a(vec3d.z, -3.9D, 3.9D);
+                tracker.trackerEntry.broadcast(new PacketPlayOutSpawnEntityLiving(id + EntityTrackerEntry.TITLE_INT, UUID.randomUUID(), 1, locX(), locY() + titleHeight, locZ(), (int) (d1 * 8000.0D), (int) (d2 * 8000.0D), (int) (d3 * 8000.0D), (byte) 0, (byte) 0, (byte) 0));
+            }
+            tracker.trackerEntry.broadcast(new PacketPlayOutEntityMetadata(id + EntityTrackerEntry.TITLE_INT, Arrays.asList(DataWatcher.of(0, (byte) 32, DataWatcherRegistry.a), DataWatcher.of(2, Optional.of(CraftChatMessage.fromStringOrNull(title)), DataWatcherRegistry.f), DataWatcher.of(3, true, DataWatcherRegistry.i), DataWatcher.of(5, true, DataWatcherRegistry.i))));
+        }
+        this.title = title;
+    }
+
+    public String getTitle() {
+        return title;
+    }
     // Nesaak end
 
     public float getBukkitYaw() {
diff --git a/src/main/java/net/minecraft/server/EntityPacket.java b/src/main/java/net/minecraft/server/EntityPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..4a8b60d330de61a03e521aa38ba0a346757a45f3
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityPacket.java
@@ -0,0 +1,9 @@
+package net.minecraft.server;
+
+public interface EntityPacket<T extends PacketListener> extends Packet<T> {
+    EntityPacket setId(int id);
+
+    int getId();
+
+    EntityPacket clone();
+}
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index c88177b77607519453bb349a8e960d22d73e9f8e..b13d058802e42cb2b92b835ef5744515fbcf76f8 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -403,7 +403,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         }
 
         while (!this.removeQueue.isEmpty()) {
-            int i = Math.min(this.removeQueue.size(), Integer.MAX_VALUE);
+            int i = Math.min(this.removeQueue.size(), Integer.MAX_VALUE) * 2;
             int[] aint = new int[i];
             //Iterator<Integer> iterator = this.removeQueue.iterator(); // Paper
             int j = 0;
@@ -416,7 +416,8 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
             Integer integer;
             while (j < i && (integer = this.removeQueue.poll()) != null) {
-                aint[j++] = integer.intValue();
+                aint[j++] = integer;
+                aint[j++] = integer + EntityTrackerEntry.TITLE_INT;
             }
             // Paper end
 
@@ -1645,6 +1646,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     public void c(Entity entity) {
         if (entity instanceof EntityHuman) {
             this.playerConnection.sendPacket(new PacketPlayOutEntityDestroy(new int[]{entity.getId()}));
+            this.playerConnection.sendPacket(new PacketPlayOutEntityDestroy(new int[]{entity.getId() + EntityTrackerEntry.TITLE_INT}));
         } else {
             this.removeQueue.add((Integer) entity.getId()); // CraftBukkit - decompile error
         }
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 62353aa33c8f2ac906cb97a7bf1d57f667defccb..007712689d509df133198cbd80cdac0d9859aab5 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -1,28 +1,36 @@
 package net.minecraft.server;
 
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Optional;
 import java.util.Set;
+import java.util.UUID;
 import java.util.function.Consumer;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
 // CraftBukkit start
+import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerVelocityEvent;
 // CraftBukkit end
 
 public class EntityTrackerEntry {
 
+    public static int TITLE_INT = 300000;
+
     private static final Logger LOGGER = LogManager.getLogger();
     private final WorldServer b;
     private final Entity tracker;
     private final int d;
     private final boolean e;
-    private final Consumer<Packet<?>> f; private Consumer<Packet<?>> getPacketConsumer() { return f; } // Paper - OBFHELPER
+    private final Consumer<Packet<?>> f;
+
+    private Consumer<Packet<?>> getPacketConsumer() { return f; } // Paper - OBFHELPER
+
     private long xLoc;
     private long yLoc;
     private long zLoc;
@@ -71,53 +79,43 @@ public class EntityTrackerEntry {
     }
 
     public final void tick() { this.a(); } // Paper - OBFHELPER
+
     public void a() {
         List<Entity> list = this.tracker.getPassengers();
-
         if (!list.equals(this.p)) {
             this.p = list;
             this.broadcastIncludingSelf(new PacketPlayOutMount(this.tracker)); // CraftBukkit
         }
-
         // PAIL : rename
         if (this.tracker instanceof EntityItemFrame /*&& this.tickCounter % 10 == 0*/) { // CraftBukkit - Moved below, should always enter this block
             EntityItemFrame entityitemframe = (EntityItemFrame) this.tracker;
             ItemStack itemstack = entityitemframe.getItem();
-
             if (this.tickCounter % 10 == 0 && itemstack.getItem() instanceof ItemWorldMap) { // CraftBukkit - Moved this.tickCounter % 10 logic here so item frames do not enter the other blocks
                 WorldMap worldmap = ItemWorldMap.getSavedMap(itemstack, this.b);
                 Iterator iterator = this.trackedPlayers.iterator(); // CraftBukkit
-
                 while (iterator.hasNext()) {
                     EntityPlayer entityplayer = (EntityPlayer) iterator.next();
-
                     worldmap.a((EntityHuman) entityplayer, itemstack);
                     Packet<?> packet = ((ItemWorldMap) itemstack.getItem()).a(itemstack, (World) this.b, (EntityHuman) entityplayer);
-
                     if (packet != null) {
                         entityplayer.playerConnection.sendPacket(packet);
                     }
                 }
             }
-
             this.c();
         }
-
         if (this.tickCounter % this.d == 0 || this.tracker.impulse || this.tracker.getDataWatcher().a()) {
             int i;
             int j;
-
             if (this.tracker.isPassenger()) {
                 i = MathHelper.d(this.tracker.yaw * 256.0F / 360.0F);
                 j = MathHelper.d(this.tracker.pitch * 256.0F / 360.0F);
                 boolean flag = Math.abs(i - this.yRot) >= 1 || Math.abs(j - this.xRot) >= 1;
-
                 if (flag) {
                     this.f.accept(new PacketPlayOutEntity.PacketPlayOutEntityLook(this.tracker.getId(), (byte) i, (byte) j, this.tracker.onGround));
                     this.yRot = i;
                     this.xRot = j;
                 }
-
                 this.d();
                 this.c();
                 this.q = true;
@@ -126,26 +124,23 @@ public class EntityTrackerEntry {
                 i = MathHelper.d(this.tracker.yaw * 256.0F / 360.0F);
                 j = MathHelper.d(this.tracker.pitch * 256.0F / 360.0F);
                 // Paper start - reduce allocation of Vec3D here
-                double vec3d_dx = this.tracker.locX() - 2.44140625E-4D*(this.xLoc);
-                double vec3d_dy = this.tracker.locY() - 2.44140625E-4D*(this.yLoc);
-                double vec3d_dz = this.tracker.locZ() - 2.44140625E-4D*(this.zLoc);
+                double vec3d_dx = this.tracker.locX() - 2.44140625E-4D * (this.xLoc);
+                double vec3d_dy = this.tracker.locY() - 2.44140625E-4D * (this.yLoc);
+                double vec3d_dz = this.tracker.locZ() - 2.44140625E-4D * (this.zLoc);
                 boolean flag1 = (vec3d_dx * vec3d_dx + vec3d_dy * vec3d_dy + vec3d_dz * vec3d_dz) >= 7.62939453125E-6D;
                 // Paper end - reduce allocation of Vec3D here
-                Packet<?> packet1 = null;
+                GroundPacket<?> packet1 = null;
                 boolean flag2 = flag1 || this.tickCounter % 60 == 0;
                 boolean flag3 = Math.abs(i - this.yRot) >= 1 || Math.abs(j - this.xRot) >= 1;
-
                 // CraftBukkit start - Code moved from below
                 if (flag2) {
                     this.d();
                 }
-
                 if (flag3) {
                     this.yRot = i;
                     this.xRot = j;
                 }
                 // CraftBukkit end
-
                 if (this.tickCounter > 0 || this.tracker instanceof EntityArrow) {
                     // Paper start - remove allocation of Vec3D here
                     long k = PacketPlayOutEntity.a(vec3d_dx);
@@ -153,7 +148,6 @@ public class EntityTrackerEntry {
                     long i1 = PacketPlayOutEntity.a(vec3d_dz);
                     // Paper end - remove allocation of Vec3D here
                     boolean flag4 = k < -32768L || k > 32767L || l < -32768L || l > 32767L || i1 < -32768L || i1 > 32767L;
-
                     if (!flag4 && this.o <= 400 && !this.q && this.r == this.tracker.onGround) {
                         if ((!flag2 || !flag3) && !(this.tracker instanceof EntityArrow)) {
                             if (flag2) {
@@ -170,24 +164,23 @@ public class EntityTrackerEntry {
                         packet1 = new PacketPlayOutEntityTeleport(this.tracker);
                     }
                 }
-
                 if ((this.e || this.tracker.impulse || this.tracker instanceof EntityLiving && ((EntityLiving) this.tracker).isGliding()) && this.tickCounter > 0) {
                     Vec3D vec3d1 = this.tracker.getMot();
                     double d0 = vec3d1.distanceSquared(this.m);
-
                     if (d0 > 1.0E-7D || d0 > 0.0D && vec3d1.g() == 0.0D) {
                         this.m = vec3d1;
-                        this.f.accept(new PacketPlayOutEntityVelocity(this.tracker.getId(), this.m));
+                        PacketPlayOutEntityVelocity vel = new PacketPlayOutEntityVelocity(this.tracker.getId(), this.m);
+                        this.f.accept(vel);
+                        if (tracker.getTitle() != null) this.f.accept(vel.clone().setId(vel.getId() + EntityTrackerEntry.TITLE_INT));
                     }
                 }
-
                 if (packet1 != null) {
                     // paper start
                     if (trackedPlayerMap == null || packet1 instanceof PacketPlayOutEntityTeleport) {
                         this.f.accept((packet1));
+                        if (tracker.getTitle() != null) this.f.accept(packet1.clone().setId(packet1.getId() + EntityTrackerEntry.TITLE_INT).setOnGround(false).setY(packet1.getY() + tracker.titleHeight));
                     } else {
                         PacketPlayOutEntityTeleport teleportPacket = null;
-
                         for (java.util.Map.Entry<EntityPlayer, Boolean> viewer : trackedPlayerMap.entrySet()) {
                             if (viewer.getValue()) {
                                 viewer.setValue(false);
@@ -195,14 +188,15 @@ public class EntityTrackerEntry {
                                     teleportPacket = new PacketPlayOutEntityTeleport(this.tracker);
                                 }
                                 sendPlayerPacket(viewer.getKey(), teleportPacket);
+                                if (tracker.getTitle() != null) sendPlayerPacket(viewer.getKey(), teleportPacket.clone().setId(teleportPacket.getId() + EntityTrackerEntry.TITLE_INT).setY(teleportPacket.getY() + tracker.titleHeight).setOnGround(false));
                             } else {
                                 sendPlayerPacket(viewer.getKey(), packet1);
+                                if (tracker.getTitle() != null) sendPlayerPacket(viewer.getKey(), packet1.clone().setId(packet1.getId() + EntityTrackerEntry.TITLE_INT).setOnGround(false));
                             }
                         }
                     }
                     // Paper end
                 }
-
                 this.c();
                 /* CraftBukkit start - Code moved up
                 if (flag2) {
@@ -214,40 +208,34 @@ public class EntityTrackerEntry {
                     this.xRot = j;
                 }
                 // CraftBukkit end */
-
                 this.q = false;
             }
-
             i = MathHelper.d(this.tracker.getHeadRotation() * 256.0F / 360.0F);
             if (Math.abs(i - this.headYaw) >= 1) {
                 this.f.accept(new PacketPlayOutEntityHeadRotation(this.tracker, (byte) i));
                 this.headYaw = i;
             }
-
             this.tracker.impulse = false;
         }
-
         ++this.tickCounter;
         if (this.tracker.velocityChanged) {
             // CraftBukkit start - Create PlayerVelocity event
             boolean cancelled = false;
-
             if (this.tracker instanceof EntityPlayer) {
                 Player player = (Player) this.tracker.getBukkitEntity();
                 org.bukkit.util.Vector velocity = player.getVelocity();
-
                 PlayerVelocityEvent event = new PlayerVelocityEvent(player, velocity.clone());
                 this.tracker.world.getServer().getPluginManager().callEvent(event);
-
                 if (event.isCancelled()) {
                     cancelled = true;
                 } else if (!velocity.equals(event.getVelocity())) {
                     player.setVelocity(event.getVelocity());
                 }
             }
-
             if (!cancelled) {
-                this.broadcastIncludingSelf(new PacketPlayOutEntityVelocity(this.tracker));
+                EntityPacket packet = new PacketPlayOutEntityVelocity(this.tracker);
+                this.broadcastIncludingSelf(packet);
+                if (tracker.getTitle() != null) this.broadcastIncludingSelf(packet.clone().setId(packet.getId() + EntityTrackerEntry.TITLE_INT));
             }
             // CraftBukkit end
             this.tracker.velocityChanged = false;
@@ -262,7 +250,6 @@ public class EntityTrackerEntry {
 
     public void b(EntityPlayer entityplayer) {
         PlayerConnection playerconnection = entityplayer.playerConnection;
-
         entityplayer.playerConnection.getClass();
         this.a(playerconnection::sendPacket, entityplayer); // CraftBukkit - add player
         this.tracker.b(entityplayer);
@@ -276,7 +263,6 @@ public class EntityTrackerEntry {
             return;
             // CraftBukkit end
         }
-
         // Nesaak start
         Packet<?> packet = null;
         if (this.tracker.disguise == null) {
@@ -285,81 +271,72 @@ public class EntityTrackerEntry {
         } else {
             this.tracker.disguise.accept(entityplayer, this.tracker);
         }
+        if (this.tracker.getTitle() != null) {
+            Vec3D vec3d = tracker.getMot();
+            double d1 = MathHelper.a(vec3d.x, -3.9D, 3.9D);
+            double d2 = MathHelper.a(vec3d.y, -3.9D, 3.9D);
+            double d3 = MathHelper.a(vec3d.z, -3.9D, 3.9D);
+            consumer.accept(new PacketPlayOutSpawnEntityLiving(tracker.getId() + EntityTrackerEntry.TITLE_INT, UUID.randomUUID(), 1, tracker.locX(), tracker.locY() + tracker.titleHeight, tracker.locZ(), (int) (d1 * 8000.0D), (int) (d2 * 8000.0D), (int) (d3 * 8000.0D), (byte) 0, (byte) 0, (byte) 0));
+            consumer.accept(new PacketPlayOutEntityMetadata(tracker.getId() + EntityTrackerEntry.TITLE_INT, Arrays.asList(DataWatcher.of(0, (byte) 32, DataWatcherRegistry.a), DataWatcher.of(2, Optional.of(CraftChatMessage.fromStringOrNull(tracker.getTitle())), DataWatcherRegistry.f), DataWatcher.of(3, true, DataWatcherRegistry.i), DataWatcher.of(5, true, DataWatcherRegistry.i))));
+        }
         // Nesaak end
-
         this.headYaw = MathHelper.d(this.tracker.getHeadRotation() * 256.0F / 360.0F);
-
         if (!this.tracker.getDataWatcher().d()) {
             consumer.accept(new PacketPlayOutEntityMetadata(this.tracker.getId(), this.tracker.getDataWatcher(), true));
         }
-
         boolean flag = this.e;
-
         if (this.tracker instanceof EntityLiving) {
             AttributeMapServer attributemapserver = (AttributeMapServer) ((EntityLiving) this.tracker).getAttributeMap();
             Collection<AttributeInstance> collection = attributemapserver.c();
-
             // CraftBukkit start - If sending own attributes send scaled health instead of current maximum health
             if (this.tracker.getId() == entityplayer.getId()) {
                 ((EntityPlayer) this.tracker).getBukkitEntity().injectScaledMaxHealth(collection, false);
             }
             // CraftBukkit end
-
             if (!collection.isEmpty()) {
                 consumer.accept(new PacketPlayOutUpdateAttributes(this.tracker.getId(), collection));
             }
-
             if (((EntityLiving) this.tracker).isGliding()) {
                 flag = true;
             }
         }
-
         this.m = this.tracker.getMot();
         if (flag && !(packet instanceof PacketPlayOutSpawnEntityLiving)) {
-            consumer.accept(new PacketPlayOutEntityVelocity(this.tracker.getId(), this.m));
+            PacketPlayOutEntityVelocity vel = new PacketPlayOutEntityVelocity(this.tracker.getId(), this.m);
+            consumer.accept(vel);
+            if (tracker.getTitle() != null) consumer.accept(vel.clone().setId(vel.getId() + EntityTrackerEntry.TITLE_INT));
         }
-
         if (this.tracker instanceof EntityLiving) {
             EnumItemSlot[] aenumitemslot = EnumItemSlot.values();
             int i = aenumitemslot.length;
-
             for (int j = 0; j < i; ++j) {
                 EnumItemSlot enumitemslot = aenumitemslot[j];
                 ItemStack itemstack = ((EntityLiving) this.tracker).getEquipment(enumitemslot);
-
                 if (!itemstack.isEmpty()) {
                     consumer.accept(new PacketPlayOutEntityEquipment(this.tracker.getId(), enumitemslot, itemstack));
                 }
             }
         }
-
         // CraftBukkit start - Fix for nonsensical head yaw
         this.headYaw = MathHelper.d(this.tracker.getHeadRotation() * 256.0F / 360.0F);
         consumer.accept(new PacketPlayOutEntityHeadRotation(this.tracker, (byte) headYaw));
         // CraftBukkit end
-
         if (this.tracker instanceof EntityLiving) {
             EntityLiving entityliving = (EntityLiving) this.tracker;
             Iterator iterator = entityliving.getEffects().iterator();
-
             while (iterator.hasNext()) {
                 MobEffect mobeffect = (MobEffect) iterator.next();
-
                 consumer.accept(new PacketPlayOutEntityEffect(this.tracker.getId(), mobeffect));
             }
         }
-
         if (!this.tracker.getPassengers().isEmpty()) {
             consumer.accept(new PacketPlayOutMount(this.tracker));
         }
-
         if (this.tracker.isPassenger()) {
             consumer.accept(new PacketPlayOutMount(this.tracker.getVehicle()));
         }
-
         if (this.tracker instanceof EntityInsentient) {
             EntityInsentient entityinsentient = (EntityInsentient) this.tracker;
-
             if (entityinsentient.isLeashed()) {
                 consumer.accept(new PacketPlayOutAttachEntity(entityinsentient, entityinsentient.getLeashHolder()));
             }
@@ -369,15 +346,12 @@ public class EntityTrackerEntry {
 
     private void c() {
         DataWatcher datawatcher = this.tracker.getDataWatcher();
-
         if (datawatcher.a()) {
             this.broadcastIncludingSelf(new PacketPlayOutEntityMetadata(this.tracker.getId(), datawatcher, false));
         }
-
         if (this.tracker instanceof EntityLiving) {
             AttributeMapServer attributemapserver = (AttributeMapServer) ((EntityLiving) this.tracker).getAttributeMap();
             Set<AttributeInstance> set = attributemapserver.getAttributes();
-
             if (!set.isEmpty()) {
                 // CraftBukkit start - Send scaled max health
                 if (this.tracker instanceof EntityPlayer) {
@@ -386,7 +360,6 @@ public class EntityTrackerEntry {
                 // CraftBukkit end
                 this.broadcastIncludingSelf(new PacketPlayOutUpdateAttributes(this.tracker.getId(), set));
             }
-
             set.clear();
         }
 
diff --git a/src/main/java/net/minecraft/server/GroundPacket.java b/src/main/java/net/minecraft/server/GroundPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..83d749a41250fd02b4684f63615fe58d6a82d783
--- /dev/null
+++ b/src/main/java/net/minecraft/server/GroundPacket.java
@@ -0,0 +1,16 @@
+package net.minecraft.server;
+
+public interface GroundPacket<T extends PacketListener> extends EntityPacket<T> {
+
+    double getY();
+
+    GroundPacket setY(double y);
+
+    boolean getOnGround();
+
+    GroundPacket setOnGround(boolean onGround);
+
+    GroundPacket clone();
+
+    GroundPacket setId(int id);
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutEntity.java b/src/main/java/net/minecraft/server/PacketPlayOutEntity.java
index d3653373ffe1510e9691418e7855772d7456423d..e940f132c79ac6f89577975a74b1eb42344ec711 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutEntity.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutEntity.java
@@ -2,7 +2,7 @@ package net.minecraft.server;
 
 import java.io.IOException;
 
-public class PacketPlayOutEntity implements Packet<PacketListenerPlayOut> {
+public class PacketPlayOutEntity implements GroundPacket<PacketListenerPlayOut> {
 
     protected int entityId;
     protected short xa;
@@ -28,82 +28,58 @@ public class PacketPlayOutEntity implements Packet<PacketListenerPlayOut> {
         this.entityId = i;
     }
 
-    public PacketPlayOutEntity clone() {
-        return new PacketPlayOutEntity(entityId);
+    @Override
+    public PacketPlayOutEntity setId(int id) {
+        entityId = id;
+        return this;
     }
 
-    public int getEntityId() {
+    @Override
+    public int getId() {
         return entityId;
     }
 
-    public void setEntityId(int entityId) {
-        this.entityId = entityId;
+    @Override
+    public PacketPlayOutEntity clone() {
+        return new PacketPlayOutEntity(entityId);
     }
 
     public short getXa() {
         return xa;
     }
 
-    public void setXa(short xa) {
-        this.xa = xa;
-    }
-
-    public short getYa() {
-        return ya;
-    }
-
-    public void setYa(short ya) {
-        this.ya = ya;
-    }
-
-    public short getZa() {
-        return za;
-    }
-
-    public void setZa(short za) {
-        this.za = za;
-    }
-
-    public byte getyRot() {
-        return yRot;
-    }
-
-    public void setyRot(byte yRot) {
-        this.yRot = yRot;
-    }
-
     public byte getzRot() {
         return zRot;
     }
 
-    public void setzRot(byte zRot) {
-        this.zRot = zRot;
+    @Override
+    public double getY() {
+        return 0;
     }
 
-    public boolean isOnGround() {
-        return onGround;
+    @Override
+    public PacketPlayOutEntity setY(double y) {
+        return this;
     }
 
-    public void setOnGround(boolean onGround) {
+    @Override
+    public boolean getOnGround() {
+        return false;
+    }
+
+    public PacketPlayOutEntity setOnGround(boolean onGround) {
         this.onGround = onGround;
+        return this;
     }
 
     public boolean isHasRot() {
         return hasRot;
     }
 
-    public void setHasRot(boolean hasRot) {
-        this.hasRot = hasRot;
-    }
-
     public boolean isHasPos() {
         return hasPos;
     }
 
-    public void setHasPos(boolean hasPos) {
-        this.hasPos = hasPos;
-    }
-
     @Override
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
         this.entityId = packetdataserializer.i();
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java b/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
index 19cf26694fea4756c49ffe50d0bb602081b11be4..6f112ba26b1c8fb679d896741fa0b0cf78a40ed2 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
@@ -5,7 +5,7 @@ import com.google.common.collect.Lists;
 import java.io.IOException;
 import java.util.List;
 
-public class PacketPlayOutEntityMetadata implements Packet<PacketListenerPlayOut> {
+public class PacketPlayOutEntityMetadata implements EntityPacket<PacketListenerPlayOut> {
 
     private int a;
     private List<DataWatcher.Item<?>> b;
@@ -28,16 +28,20 @@ public class PacketPlayOutEntityMetadata implements Packet<PacketListenerPlayOut
         this.b = b;
     }
 
-    public PacketPlayOutEntityMetadata clone() {
-        return new PacketPlayOutEntityMetadata(a, Lists.newArrayList(b));
+    @Override
+    public EntityPacket setId(int id) {
+        this.a = id;
+        return this;
     }
 
-    public int getID() {
+    @Override
+    public int getId() {
         return a;
     }
 
-    public void setID(int a) {
-        this.a = a;
+    @Override
+    public PacketPlayOutEntityMetadata clone() {
+        return new PacketPlayOutEntityMetadata(a, Lists.newArrayList(b));
     }
 
     public List<DataWatcher.Item<?>> getItems() {
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutEntityTeleport.java b/src/main/java/net/minecraft/server/PacketPlayOutEntityTeleport.java
index f2e87336a3b5c888ec079da75ddc70859d6b31e9..3fadc44f8ba46bee5a9361ea721f9912072ec9fb 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutEntityTeleport.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutEntityTeleport.java
@@ -2,51 +2,116 @@ package net.minecraft.server;
 
 import java.io.IOException;
 
-public class PacketPlayOutEntityTeleport implements Packet<PacketListenerPlayOut> {
+public class PacketPlayOutEntityTeleport implements GroundPacket<PacketListenerPlayOut> {
 
-    private int a;
-    private double b;
-    private double c;
-    private double d;
-    private byte e;
-    private byte f;
-    private boolean g;
+    private int id;
+    private double x;
+    private double y;
+    private double z;
+    private byte yaw;
+    private byte pitch;
+    private boolean onGround;
 
     public PacketPlayOutEntityTeleport() {}
 
     public PacketPlayOutEntityTeleport(Entity entity) {
-        this.a = entity.getId();
-        this.b = entity.locX();
-        this.c = entity.locY();
-        this.d = entity.locZ();
-        this.e = (byte) ((int) (entity.yaw * 256.0F / 360.0F));
-        this.f = (byte) ((int) (entity.pitch * 256.0F / 360.0F));
-        this.g = entity.onGround;
+        this.id = entity.getId();
+        this.x = entity.locX();
+        this.y = entity.locY();
+        this.z = entity.locZ();
+        this.yaw = (byte) ((int) (entity.yaw * 256.0F / 360.0F));
+        this.pitch = (byte) ((int) (entity.pitch * 256.0F / 360.0F));
+        this.onGround = entity.onGround;
+    }
+
+    public PacketPlayOutEntityTeleport(int id, double x, double y, double z, byte yaw, byte pitch, boolean onGround) {
+        this.id = id;
+        this.x = x;
+        this.y = y;
+        this.z = z;
+        this.yaw = yaw;
+        this.pitch = pitch;
+        this.onGround = onGround;
     }
 
     @Override
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
-        this.a = packetdataserializer.i();
-        this.b = packetdataserializer.readDouble();
-        this.c = packetdataserializer.readDouble();
-        this.d = packetdataserializer.readDouble();
-        this.e = packetdataserializer.readByte();
-        this.f = packetdataserializer.readByte();
-        this.g = packetdataserializer.readBoolean();
+        this.id = packetdataserializer.i();
+        this.x = packetdataserializer.readDouble();
+        this.y = packetdataserializer.readDouble();
+        this.z = packetdataserializer.readDouble();
+        this.yaw = packetdataserializer.readByte();
+        this.pitch = packetdataserializer.readByte();
+        this.onGround = packetdataserializer.readBoolean();
     }
 
     @Override
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
-        packetdataserializer.d(this.a);
-        packetdataserializer.writeDouble(this.b);
-        packetdataserializer.writeDouble(this.c);
-        packetdataserializer.writeDouble(this.d);
-        packetdataserializer.writeByte(this.e);
-        packetdataserializer.writeByte(this.f);
-        packetdataserializer.writeBoolean(this.g);
+        packetdataserializer.d(this.id);
+        packetdataserializer.writeDouble(this.x);
+        packetdataserializer.writeDouble(this.y);
+        packetdataserializer.writeDouble(this.z);
+        packetdataserializer.writeByte(this.yaw);
+        packetdataserializer.writeByte(this.pitch);
+        packetdataserializer.writeBoolean(this.onGround);
     }
 
     public void a(PacketListenerPlayOut packetlistenerplayout) {
         packetlistenerplayout.a(this);
     }
+
+    public double getX() {
+        return x;
+    }
+
+    public double getY() {
+        return y;
+    }
+
+    public double getZ() {
+        return z;
+    }
+
+    public byte getYaw() {
+        return yaw;
+    }
+
+    public byte getPitch() {
+        return pitch;
+    }
+
+    public boolean isOnGround() {
+        return onGround;
+    }
+
+    public PacketPlayOutEntityTeleport setOnGround(boolean onGround) {
+        this.onGround = onGround;
+        return this;
+    }
+
+    public PacketPlayOutEntityTeleport setY(double y) {
+        this.y = y;
+        return this;
+    }
+
+    @Override
+    public boolean getOnGround() {
+        return onGround;
+    }
+
+    @Override
+    public PacketPlayOutEntityTeleport setId(int id) {
+        this.id = id;
+        return this;
+    }
+
+    @Override
+    public int getId() {
+        return id;
+    }
+
+    @Override
+    public PacketPlayOutEntityTeleport clone() {
+        return new PacketPlayOutEntityTeleport(id, x, y, z, yaw, pitch, onGround);
+    }
 }
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutEntityVelocity.java b/src/main/java/net/minecraft/server/PacketPlayOutEntityVelocity.java
index d77b83231668d4963d74c925463970a2aca111eb..1090f53523ddbaa2b998c56140ddbd9a9df4ff88 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutEntityVelocity.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutEntityVelocity.java
@@ -2,12 +2,12 @@ package net.minecraft.server;
 
 import java.io.IOException;
 
-public class PacketPlayOutEntityVelocity implements Packet<PacketListenerPlayOut> {
+public class PacketPlayOutEntityVelocity implements EntityPacket<PacketListenerPlayOut> {
 
-    private int a;
-    private int b;
-    private int c;
-    private int d;
+    private int id;
+    private int x;
+    private int y;
+    private int z;
 
     public PacketPlayOutEntityVelocity() {}
 
@@ -16,31 +16,54 @@ public class PacketPlayOutEntityVelocity implements Packet<PacketListenerPlayOut
     }
 
     public PacketPlayOutEntityVelocity(int i, Vec3D vec3d) {
-        this.a = i;
+        this.id = i;
         double d0 = 3.9D;
         double d1 = MathHelper.a(vec3d.x, -3.9D, 3.9D);
         double d2 = MathHelper.a(vec3d.y, -3.9D, 3.9D);
         double d3 = MathHelper.a(vec3d.z, -3.9D, 3.9D);
 
-        this.b = (int) (d1 * 8000.0D);
-        this.c = (int) (d2 * 8000.0D);
-        this.d = (int) (d3 * 8000.0D);
+        this.x = (int) (d1 * 8000.0D);
+        this.y = (int) (d2 * 8000.0D);
+        this.z = (int) (d3 * 8000.0D);
+    }
+
+    public PacketPlayOutEntityVelocity(int id, int x, int y, int z) {
+        this.id = id;
+        this.x = x;
+        this.y = y;
+        this.z = z;
+    }
+
+    @Override
+    public PacketPlayOutEntityVelocity setId(int id) {
+        this.id = id;
+        return this;
+    }
+
+    @Override
+    public int getId() {
+        return id;
+    }
+
+    @Override
+    public EntityPacket clone() {
+        return new PacketPlayOutEntityVelocity(id, x, y, z);
     }
 
     @Override
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
-        this.a = packetdataserializer.i();
-        this.b = packetdataserializer.readShort();
-        this.c = packetdataserializer.readShort();
-        this.d = packetdataserializer.readShort();
+        this.id = packetdataserializer.i();
+        this.x = packetdataserializer.readShort();
+        this.y = packetdataserializer.readShort();
+        this.z = packetdataserializer.readShort();
     }
 
     @Override
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
-        packetdataserializer.d(this.a);
-        packetdataserializer.writeShort(this.b);
-        packetdataserializer.writeShort(this.c);
-        packetdataserializer.writeShort(this.d);
+        packetdataserializer.d(this.id);
+        packetdataserializer.writeShort(this.x);
+        packetdataserializer.writeShort(this.y);
+        packetdataserializer.writeShort(this.z);
     }
 
     public void a(PacketListenerPlayOut packetlistenerplayout) {

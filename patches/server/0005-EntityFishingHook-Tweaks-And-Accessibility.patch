From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nesaak <52047222+Nesaak@users.noreply.github.com>
Date: Sun, 31 May 2020 20:00:10 -0400
Subject: [PATCH] EntityFishingHook Tweaks And Accessibility


diff --git a/src/main/java/net/minecraft/server/EntityFishingHook.java b/src/main/java/net/minecraft/server/EntityFishingHook.java
index 73f5961aa331aa94fbbc57c5b4db9bc43ee5cdde..a3ab37102e4b06715b2b69e62144971d7d4b8512 100644
--- a/src/main/java/net/minecraft/server/EntityFishingHook.java
+++ b/src/main/java/net/minecraft/server/EntityFishingHook.java
@@ -1,43 +1,42 @@
 package net.minecraft.server;
 
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
 import javax.annotation.Nullable;
-// CraftBukkit start
-import org.bukkit.entity.Player;
-import org.bukkit.entity.FishHook;
-import org.bukkit.event.player.PlayerFishEvent;
-// CraftBukkit end
 
 public class EntityFishingHook extends Entity {
 
     private static final DataWatcherObject<Integer> c = DataWatcher.a(EntityFishingHook.class, DataWatcherRegistry.b);
     private boolean isInGround;
-    private int e;
+    private int life;
     public EntityHuman owner;
-    private int g;
-    private int ao;
-    private int ap;
-    private int aq;
-    private float ar;
+    private int flightTime;
+    private int nibble;
+    private int timeUntilLured;
+    private int timeUntilHooked;
+    private float fishAngle;
     public Entity hooked;
-    private EntityFishingHook.HookState as;
-    private final int at;
-    private final int au;
+    private HookState hookState;
+    private final int luck;
+    private final int lureSpeed;
 
     private EntityFishingHook(World world, EntityHuman entityhuman, int i, int j) {
         super(EntityTypes.FISHING_BOBBER, world);
-        this.as = EntityFishingHook.HookState.FLYING;
+        this.hookState = HookState.FLYING;
         this.ac = true;
         this.owner = entityhuman;
-        this.owner.hookedFish = this;
-        this.at = Math.max(0, i);
-        this.au = Math.max(0, j);
+        this.luck = 0;
+        this.lureSpeed = 0;
     }
 
     public EntityFishingHook(EntityHuman entityhuman, World world, int i, int j) {
         this(world, entityhuman, i, j);
+        cast();
+    }
+
+    public EntityFishingHook(World world) {
+        this(world, null, 0, 0);
+    }
+
+    public void cast() {
         float f = this.owner.pitch;
         float f1 = this.owner.yaw;
         float f2 = MathHelper.cos(-f1 * 0.017453292F - 3.1415927F);
@@ -47,11 +46,9 @@ public class EntityFishingHook extends Entity {
         double d0 = this.owner.locX() - (double) f3 * 0.3D;
         double d1 = this.owner.getHeadY();
         double d2 = this.owner.locZ() - (double) f2 * 0.3D;
-
         this.setPositionRotation(d0, d1, d2, f1, f);
         Vec3D vec3d = new Vec3D((double) (-f3), (double) MathHelper.a(-(f5 / f4), -5.0F, 5.0F), (double) (-f2));
         double d3 = vec3d.f();
-
         vec3d = vec3d.d(0.6D / d3 + 0.5D + this.random.nextGaussian() * 0.0045D, 0.6D / d3 + 0.5D + this.random.nextGaussian() * 0.0045D, 0.6D / d3 + 0.5D + this.random.nextGaussian() * 0.0045D);
         this.setMot(vec3d);
         this.yaw = (float) (MathHelper.d(vec3d.x, vec3d.z) * 57.2957763671875D);
@@ -60,6 +57,39 @@ public class EntityFishingHook extends Entity {
         this.lastPitch = this.pitch;
     }
 
+    public HookState getHookState() {
+        return hookState;
+    }
+
+    public boolean isInGround() {
+        return isInGround;
+    }
+
+    public void setLife(int life) {
+        this.life = life;
+    }
+
+    public int getLife() {
+        return life;
+    }
+
+    public int getFlightTime() {
+        return flightTime;
+    }
+
+    public void setFlightTime(int flightTime) {
+        this.flightTime = flightTime;
+    }
+
+    public Entity getHooked() {
+        return hooked;
+    }
+
+    public void setHooked(Entity hooked) {
+        this.hooked = hooked;
+        setHookedEntity();
+    }
+
     @Override
     protected void initDatawatcher() {
         this.getDataWatcher().register(EntityFishingHook.c, 0);
@@ -69,165 +99,122 @@ public class EntityFishingHook extends Entity {
     public void a(DataWatcherObject<?> datawatcherobject) {
         if (EntityFishingHook.c.equals(datawatcherobject)) {
             int i = (Integer) this.getDataWatcher().get(EntityFishingHook.c);
-
             this.hooked = i > 0 ? this.world.getEntity(i - 1) : null;
         }
-
         super.a(datawatcherobject);
     }
 
     @Override
     public void tick() {
         super.tick();
-        if (this.owner == null) {
-            this.die();
-        } else if (this.world.isClientSide || !this.k()) {
-            if (this.isInGround) {
-                ++this.e;
-                if (this.e >= 1200) {
-                    this.die();
-                    return;
-                }
-            }
 
-            float f = 0.0F;
-            BlockPosition blockposition = new BlockPosition(this);
-            Fluid fluid = this.world.getFluid(blockposition);
-
-            if (fluid.a(TagsFluid.WATER)) {
-                f = fluid.getHeight(this.world, blockposition);
-            }
+        if (shouldStopFishing()) {
+            this.die();
+        }
 
-            if (this.as == EntityFishingHook.HookState.FLYING) {
-                if (this.hooked != null) {
-                    this.setMot(Vec3D.a);
-                    this.as = EntityFishingHook.HookState.HOOKED_IN_ENTITY;
-                    return;
-                }
+        if (this.isInGround) {
+            ++this.life;
+        }
 
-                if (f > 0.0F) {
-                    this.setMot(this.getMot().d(0.3D, 0.2D, 0.3D));
-                    this.as = EntityFishingHook.HookState.BOBBING;
-                    return;
-                }
+        BlockPosition blockposition = new BlockPosition(this);
+        Fluid fluid = this.world.getFluid(blockposition);
 
-                if (!this.world.isClientSide) {
-                    this.m();
-                }
+        float depth = 0.0F;
+        if (fluid.a(TagsFluid.WATER)) {
+            depth = fluid.getHeight(this.world, blockposition);
+        }
 
-                if (!this.isInGround && !this.onGround && !this.positionChanged) {
-                    ++this.g;
-                } else {
-                    this.g = 0;
-                    this.setMot(Vec3D.a);
-                }
+        if (this.hookState == HookState.FLYING) {
+            if (this.hooked != null) {
+                this.setMot(Vec3D.a);
+                this.hookState = HookState.HOOKED_IN_ENTITY;
+                return;
+            }
+            if (depth > 0.0F) {
+                this.setMot(this.getMot().d(0.3D, 0.2D, 0.3D));
+                this.hookState = HookState.BOBBING;
+                return;
+            }
+            if (!this.world.isClientSide) {
+                this.checkCollision();
+            }
+            if (!this.isInGround && !this.onGround && !this.positionChanged) {
+                ++this.flightTime;
             } else {
-                if (this.as == EntityFishingHook.HookState.HOOKED_IN_ENTITY) {
-                    if (this.hooked != null) {
-                        if (this.hooked.dead) {
-                            this.hooked = null;
-                            this.as = EntityFishingHook.HookState.FLYING;
-                        } else {
-                            this.setPosition(this.hooked.locX(), this.hooked.e(0.8D), this.hooked.locZ());
-                        }
-                    }
-
-                    return;
-                }
-
-                if (this.as == EntityFishingHook.HookState.BOBBING) {
-                    Vec3D vec3d = this.getMot();
-                    double d0 = this.locY() + vec3d.y - (double) blockposition.getY() - (double) f;
-
-                    if (Math.abs(d0) < 0.01D) {
-                        d0 += Math.signum(d0) * 0.1D;
-                    }
-
-                    this.setMot(vec3d.x * 0.9D, vec3d.y - d0 * (double) this.random.nextFloat() * 0.2D, vec3d.z * 0.9D);
-                    if (!this.world.isClientSide && f > 0.0F) {
-                        this.a(blockposition);
-                    }
+                this.flightTime = 0;
+                this.setMot(Vec3D.a);
+            }
+        } else if (this.hookState == HookState.HOOKED_IN_ENTITY) {
+            if (this.hooked != null) {
+                if (this.hooked.dead) {
+                    this.hooked = null;
+                    this.hookState = HookState.FLYING;
+                } else {
+                    this.setPosition(this.hooked.locX(), this.hooked.e(0.8D), this.hooked.locZ());
                 }
             }
-
-            if (!fluid.a(TagsFluid.WATER)) {
-                this.setMot(this.getMot().add(0.0D, -0.03D, 0.0D));
+            return;
+        } else if (this.hookState == HookState.BOBBING) {
+            Vec3D vec3d = this.getMot();
+            double d0 = this.locY() + vec3d.y - (double) blockposition.getY() - (double) depth;
+            if (Math.abs(d0) < 0.01D) {
+                d0 += Math.signum(d0) * 0.1D;
             }
+            this.setMot(vec3d.x * 0.9D, vec3d.y - d0 * (double) this.random.nextFloat() * 0.2D, vec3d.z * 0.9D);
+        }
 
-            this.move(EnumMoveType.SELF, this.getMot());
-            this.l();
-            double d1 = 0.92D;
-
-            this.setMot(this.getMot().a(0.92D));
-            this.Z();
-
-            // Paper start - These shouldn't be going through portals
-            if (this.inPortal()) {
-                this.die();
-            }
-            // Paper end
+        if (!fluid.a(TagsFluid.WATER)) {
+            this.setMot(this.getMot().add(0.0D, -0.03D, 0.0D));
         }
-    }
 
-    private boolean k() {
-        ItemStack itemstack = this.owner.getItemInMainHand();
-        ItemStack itemstack1 = this.owner.getItemInOffHand();
-        boolean flag = itemstack.getItem() == Items.FISHING_ROD;
-        boolean flag1 = itemstack1.getItem() == Items.FISHING_ROD;
+        this.move(EnumMoveType.SELF, this.getMot());
+        this.updateRotation();
+        this.setMot(this.getMot().a(0.92D));
+        this.Z();
+    }
 
-        if (!this.owner.dead && this.owner.isAlive() && (flag || flag1) && this.h(this.owner) <= 1024.0D) {
-            return false;
-        } else {
-            this.die();
-            return true;
-        }
+    private boolean shouldStopFishing() {
+        if (this.inPortal()) return true;
+        if (this.isInGround && this.life >= 1200) return true;
+        if (owner != null && ((this.owner.dead && !this.owner.isAlive()) || this.h(this.owner) >= 1024.0D)) return true;
+        return false;
     }
 
-    private void l() {
+    private void updateRotation() {
         Vec3D vec3d = this.getMot();
         float f = MathHelper.sqrt(b(vec3d));
-
         this.yaw = (float) (MathHelper.d(vec3d.x, vec3d.z) * 57.2957763671875D);
-
-        for (this.pitch = (float) (MathHelper.d(vec3d.y, (double) f) * 57.2957763671875D); this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) {
-            ;
-        }
-
+        for (this.pitch = (float) (MathHelper.d(vec3d.y, (double) f) * 57.2957763671875D); this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) { ; }
         while (this.pitch - this.lastPitch >= 180.0F) {
             this.lastPitch += 360.0F;
         }
-
         while (this.yaw - this.lastYaw < -180.0F) {
             this.lastYaw -= 360.0F;
         }
-
         while (this.yaw - this.lastYaw >= 180.0F) {
             this.lastYaw += 360.0F;
         }
-
         this.pitch = MathHelper.g(0.2F, this.lastPitch, this.pitch);
         this.yaw = MathHelper.g(0.2F, this.lastYaw, this.yaw);
     }
 
-    private void m() {
+    private void checkCollision() {
         MovingObjectPosition movingobjectposition = ProjectileHelper.a(this, this.getBoundingBox().a(this.getMot()).g(1.0D), (entity) -> {
-            return !entity.isSpectator() && (entity.isInteractable() || entity instanceof EntityItem) && (entity != this.owner || this.g >= 5);
+            return !entity.isSpectator() && (entity.isInteractable() || entity instanceof EntityItem) && (entity != this.owner || this.flightTime >= 5);
         }, RayTrace.BlockCollisionOption.COLLIDER, true);
-
         // Paper start - Call ProjectileCollideEvent
         if (movingobjectposition instanceof MovingObjectPositionEntity) {
-            com.destroystokyo.paper.event.entity.ProjectileCollideEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileCollideEvent(this, (MovingObjectPositionEntity)movingobjectposition);
+            com.destroystokyo.paper.event.entity.ProjectileCollideEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileCollideEvent(this, (MovingObjectPositionEntity) movingobjectposition);
             if (event.isCancelled()) {
                 movingobjectposition = null;
             }
         }
         // Paper end
-
         if (movingobjectposition != null && movingobjectposition.getType() != MovingObjectPosition.EnumMovingObjectType.MISS) { // Paper - add null check in case cancelled
             org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileHitEvent(this, movingobjectposition); // CraftBukkit - Call event
             if (movingobjectposition.getType() == MovingObjectPosition.EnumMovingObjectType.ENTITY) {
                 this.hooked = ((MovingObjectPositionEntity) movingobjectposition).getEntity();
-                this.n();
+                this.setHookedEntity();
             } else {
                 this.isInGround = true;
             }
@@ -235,11 +222,59 @@ public class EntityFishingHook extends Entity {
 
     }
 
-    private void n() {
+    private void setHookedEntity() {
         this.getDataWatcher().set(EntityFishingHook.c, this.hooked.getId() + 1);
     }
 
-    private void a(BlockPosition blockposition) {
+    @Override
+    public void b(NBTTagCompound nbttagcompound) {}
+
+    @Override
+    public void a(NBTTagCompound nbttagcompound) {}
+
+    public void reelHookedEntity() {
+        if (this.owner != null) {
+            Vec3D vec3d = (new Vec3D(this.owner.locX() - this.locX(), this.owner.locY() - this.locY(), this.owner.locZ() - this.locZ())).a(0.1D);
+            this.hooked.setMot(this.hooked.getMot().e(vec3d));
+        }
+    }
+
+    @Override
+    protected boolean playStepSound() {
+        return false;
+    }
+
+    @Override
+    public void die() {
+        super.die();
+    }
+
+    @Nullable
+    public EntityHuman getOwner() {
+        return this.owner;
+    }
+
+    @Override
+    public boolean canPortal() {
+        return false;
+    }
+
+    @Override
+    public Packet<?> L() {
+        EntityHuman entityhuman = this.getOwner();
+        return new PacketPlayOutSpawnEntity(this, entityhuman == null ? this.getId() : entityhuman.getId());
+    }
+
+    public enum HookState {
+
+        FLYING,
+        HOOKED_IN_ENTITY,
+        BOBBING;
+
+    }
+
+    /*
+    private void catchingFish(BlockPosition blockposition) {
         WorldServer worldserver = (WorldServer) this.world;
         int i = 1;
         BlockPosition blockposition1 = blockposition.up();
@@ -252,11 +287,11 @@ public class EntityFishingHook extends Entity {
             --i;
         }
 
-        if (this.ao > 0) {
-            --this.ao;
-            if (this.ao <= 0) {
-                this.ap = 0;
-                this.aq = 0;
+        if (this.nibble > 0) {
+            --this.nibble;
+            if (this.nibble <= 0) {
+                this.timeUntilLured = 0;
+                this.timeUntilHooked = 0;
                 // CraftBukkit start
                 PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.owner.getBukkitEntity(), null, (FishHook) this.getBukkitEntity(), PlayerFishEvent.State.FAILED_ATTEMPT);
                 this.world.getServer().getPluginManager().callEvent(playerFishEvent);
@@ -273,16 +308,16 @@ public class EntityFishingHook extends Entity {
             double d2;
             Block block;
 
-            if (this.aq > 0) {
-                this.aq -= i;
-                if (this.aq > 0) {
-                    this.ar = (float) ((double) this.ar + this.random.nextGaussian() * 4.0D);
-                    f = this.ar * 0.017453292F;
+            if (this.timeUntilHooked > 0) {
+                this.timeUntilHooked -= i;
+                if (this.timeUntilHooked > 0) {
+                    this.fishAngle = (float) ((double) this.fishAngle + this.random.nextGaussian() * 4.0D);
+                    f = this.fishAngle * 0.017453292F;
                     f1 = MathHelper.sin(f);
                     f2 = MathHelper.cos(f);
-                    d0 = this.locX() + (double) (f1 * (float) this.aq * 0.1F);
+                    d0 = this.locX() + (double) (f1 * (float) this.timeUntilHooked * 0.1F);
                     d1 = (double) ((float) MathHelper.floor(this.locY()) + 1.0F);
-                    d2 = this.locZ() + (double) (f2 * (float) this.aq * 0.1F);
+                    d2 = this.locZ() + (double) (f2 * (float) this.timeUntilHooked * 0.1F);
                     block = worldserver.getType(new BlockPosition(d0, d1 - 1.0D, d2)).getBlock();
                     if (block == Blocks.WATER) {
                         if (this.random.nextFloat() < 0.15F) {
@@ -311,17 +346,17 @@ public class EntityFishingHook extends Entity {
 
                     worldserver.a(Particles.BUBBLE, this.locX(), d3, this.locZ(), (int) (1.0F + this.getWidth() * 20.0F), (double) this.getWidth(), 0.0D, (double) this.getWidth(), 0.20000000298023224D);
                     worldserver.a(Particles.FISHING, this.locX(), d3, this.locZ(), (int) (1.0F + this.getWidth() * 20.0F), (double) this.getWidth(), 0.0D, (double) this.getWidth(), 0.20000000298023224D);
-                    this.ao = MathHelper.nextInt(this.random, 20, 40);
+                    this.nibble = MathHelper.nextInt(this.random, 20, 40);
                 }
-            } else if (this.ap > 0) {
-                this.ap -= i;
+            } else if (this.timeUntilLured > 0) {
+                this.timeUntilLured -= i;
                 f = 0.15F;
-                if (this.ap < 20) {
-                    f = (float) ((double) f + (double) (20 - this.ap) * 0.05D);
-                } else if (this.ap < 40) {
-                    f = (float) ((double) f + (double) (40 - this.ap) * 0.02D);
-                } else if (this.ap < 60) {
-                    f = (float) ((double) f + (double) (60 - this.ap) * 0.01D);
+                if (this.timeUntilLured < 20) {
+                    f = (float) ((double) f + (double) (20 - this.timeUntilLured) * 0.05D);
+                } else if (this.timeUntilLured < 40) {
+                    f = (float) ((double) f + (double) (40 - this.timeUntilLured) * 0.02D);
+                } else if (this.timeUntilLured < 60) {
+                    f = (float) ((double) f + (double) (60 - this.timeUntilLured) * 0.01D);
                 }
 
                 if (this.random.nextFloat() < f) {
@@ -336,34 +371,26 @@ public class EntityFishingHook extends Entity {
                     }
                 }
 
-                if (this.ap <= 0) {
-                    this.ar = MathHelper.a(this.random, 0.0F, 360.0F);
-                    this.aq = MathHelper.nextInt(this.random, 20, 80);
+                if (this.timeUntilLured <= 0) {
+                    this.fishAngle = MathHelper.a(this.random, 0.0F, 360.0F);
+                    this.timeUntilHooked = MathHelper.nextInt(this.random, 20, 80);
                 }
             } else {
-                this.ap = MathHelper.nextInt(this.random, world.paperConfig.fishingMinTicks, world.paperConfig.fishingMaxTicks); // Paper
-                this.ap -= this.au * 20 * 5;
-                this.ap = Math.max(0, this.ap); // Paper - Don't allow negative values
+                this.timeUntilLured = MathHelper.nextInt(this.random, world.paperConfig.fishingMinTicks, world.paperConfig.fishingMaxTicks); // Paper
+                this.timeUntilLured -= this.lureSpeed * 20 * 5;
+                this.timeUntilLured = Math.max(0, this.timeUntilLured); // Paper - Don't allow negative values
             }
         }
 
     }
 
-    @Override
-    public void b(NBTTagCompound nbttagcompound) {}
-
-    @Override
-    public void a(NBTTagCompound nbttagcompound) {}
-
-    public int b(ItemStack itemstack) {
+    public void reel() {
         if (!this.world.isClientSide && this.owner != null) {
             int i = 0;
-
             if (this.hooked != null) {
                 // CraftBukkit start
                 PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.owner.getBukkitEntity(), this.hooked.getBukkitEntity(), (FishHook) this.getBukkitEntity(), PlayerFishEvent.State.CAUGHT_ENTITY);
                 this.world.getServer().getPluginManager().callEvent(playerFishEvent);
-
                 if (playerFishEvent.isCancelled()) {
                     return 0;
                 }
@@ -372,14 +399,12 @@ public class EntityFishingHook extends Entity {
                 CriterionTriggers.D.a((EntityPlayer) this.owner, itemstack, this, Collections.emptyList());
                 this.world.broadcastEntityEffect(this, (byte) 31);
                 i = this.hooked instanceof EntityItem ? 3 : 5;
-            } else if (this.ao > 0) {
-                LootTableInfo.Builder loottableinfo_builder = (new LootTableInfo.Builder((WorldServer) this.world)).set(LootContextParameters.POSITION, new BlockPosition(this)).set(LootContextParameters.TOOL, itemstack).a(this.random).a((float) this.at + this.owner.eA());
+            } else if (this.nibble > 0) {
+                LootTableInfo.Builder loottableinfo_builder = (new LootTableInfo.Builder((WorldServer) this.world)).set(LootContextParameters.POSITION, new BlockPosition(this)).set(LootContextParameters.TOOL, itemstack).a(this.random).a((float) this.luck + this.owner.eA());
                 LootTable loottable = this.world.getMinecraftServer().getLootTableRegistry().getLootTable(LootTables.ab);
                 List<ItemStack> list = loottable.populateLoot(loottableinfo_builder.build(LootContextParameterSets.FISHING));
-
                 CriterionTriggers.D.a((EntityPlayer) this.owner, itemstack, this, list);
                 Iterator iterator = list.iterator();
-
                 while (iterator.hasNext()) {
                     ItemStack itemstack1 = (ItemStack) iterator.next();
                     EntityItem entityitem = new EntityItem(this.world, this.locX(), this.locY(), this.locZ(), itemstack1);
@@ -387,7 +412,6 @@ public class EntityFishingHook extends Entity {
                     PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.owner.getBukkitEntity(), entityitem.getBukkitEntity(), (FishHook) this.getBukkitEntity(), PlayerFishEvent.State.CAUGHT_FISH);
                     playerFishEvent.setExpToDrop(this.random.nextInt(6) + 1);
                     this.world.getServer().getPluginManager().callEvent(playerFishEvent);
-
                     if (playerFishEvent.isCancelled()) {
                         return 0;
                     }
@@ -396,7 +420,6 @@ public class EntityFishingHook extends Entity {
                     double d1 = this.owner.locY() - this.locY();
                     double d2 = this.owner.locZ() - this.locZ();
                     double d3 = 0.1D;
-
                     entityitem.setMot(d0 * 0.1D, d1 * 0.1D + Math.sqrt(Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2)) * 0.08D, d2 * 0.1D);
                     this.world.addEntity(entityitem);
                     // CraftBukkit start - this.random.nextInt(6) + 1 -> playerFishEvent.getExpToDrop()
@@ -408,15 +431,12 @@ public class EntityFishingHook extends Entity {
                         this.owner.a(StatisticList.FISH_CAUGHT, 1);
                     }
                 }
-
                 i = 1;
             }
-
             if (this.isInGround) {
                 // CraftBukkit start
                 PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.owner.getBukkitEntity(), null, (FishHook) this.getBukkitEntity(), PlayerFishEvent.State.IN_GROUND);
                 this.world.getServer().getPluginManager().callEvent(playerFishEvent);
-
                 if (playerFishEvent.isCancelled()) {
                     return 0;
                 }
@@ -432,57 +452,11 @@ public class EntityFishingHook extends Entity {
                 }
             }
             // CraftBukkit end
-
             this.die();
             return i;
         } else {
             return 0;
         }
     }
-
-    protected void reel() {
-        if (this.owner != null) {
-            Vec3D vec3d = (new Vec3D(this.owner.locX() - this.locX(), this.owner.locY() - this.locY(), this.owner.locZ() - this.locZ())).a(0.1D);
-
-            this.hooked.setMot(this.hooked.getMot().e(vec3d));
-        }
-    }
-
-    @Override
-    protected boolean playStepSound() {
-        return false;
-    }
-
-    @Override
-    public void die() {
-        super.die();
-        if (this.owner != null) {
-            this.owner.hookedFish = null;
-        }
-
-    }
-
-    @Nullable
-    public EntityHuman i() {
-        return this.owner;
-    }
-
-    @Override
-    public boolean canPortal() {
-        return false;
-    }
-
-    @Override
-    public Packet<?> L() {
-        EntityHuman entityhuman = this.i();
-
-        return new PacketPlayOutSpawnEntity(this, entityhuman == null ? this.getId() : entityhuman.getId());
-    }
-
-    static enum HookState {
-
-        FLYING, HOOKED_IN_ENTITY, BOBBING;
-
-        private HookState() {}
-    }
-}
+     */
+}
\ No newline at end of file
